{"triggers":[],"nodes":[{"uid":"34b66532-5c83-410b-ab16-9a51e020db71","commandName":"step","packageName":"Step","disabled":false,"children":[{"uid":"5625ecef-4b43-4a55-97e5-84575a725829","commandName":"messageBox","packageName":"MessageBox","disabled":true,"attributes":[{"name":"title","value":{"type":"STRING","string":"Automation Anywhere Enterprise Client"}},{"name":"content","value":{"type":"STRING","expression":"$sLearningInstanceId$  $sUserName$ $sPassword$ $sControlRoomUrl$"}},{"name":"scrollLines","value":{"type":"NUMBER","number":"30"}},{"name":"closeMsgBox","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"1b579ef6-04c1-4cc6-a3e0-9ad531c633cc","commandName":"put","packageName":"Dictionary","disabled":false,"attributes":[{"name":"sourceMap","value":{"type":"VARIABLE","variableName":"dictIQBotFileUploadParameters"}},{"name":"key","value":{"type":"STRING","string":"controlRoomUrl"}},{"name":"newValue","value":{"type":"VARIABLE","variableName":"sControlRoomUrl"}}],"returnTo":{"type":"VARIABLE","variableName":"sControlRoomUrl"}},{"uid":"477f17d8-cac1-404a-bde0-6623a3fea3dc","commandName":"put","packageName":"Dictionary","disabled":false,"attributes":[{"name":"sourceMap","value":{"type":"VARIABLE","variableName":"dictIQBotFileUploadParameters"}},{"name":"key","value":{"type":"STRING","string":"userName"}},{"name":"newValue","value":{"type":"VARIABLE","variableName":"sUserName"}}],"returnTo":{"type":"VARIABLE","variableName":"sUserName"}},{"uid":"056092ae-0321-49a7-899f-3ea44feb425a","commandName":"put","packageName":"Dictionary","disabled":false,"attributes":[{"name":"sourceMap","value":{"type":"VARIABLE","variableName":"dictIQBotFileUploadParameters"}},{"name":"key","value":{"type":"STRING","string":"password"}},{"name":"newValue","value":{"type":"VARIABLE","variableName":"sPassword"}}],"returnTo":{"type":"VARIABLE","variableName":"sPassword"}},{"uid":"8176d581-a4fb-462e-91fc-32f13453cfb8","commandName":"put","packageName":"Dictionary","disabled":false,"attributes":[{"name":"sourceMap","value":{"type":"VARIABLE","variableName":"dictIQBotFileUploadParameters"}},{"name":"key","value":{"type":"STRING","string":"learningInstanceId"}},{"name":"newValue","value":{"type":"VARIABLE","variableName":"sLearningInstanceId"}}],"returnTo":{"type":"VARIABLE","variableName":"sLearningInstanceId"}},{"uid":"9b361d1e-a7c5-4727-89fe-f30dba9ec81f","commandName":"put","packageName":"Dictionary","disabled":false,"attributes":[{"name":"sourceMap","value":{"type":"VARIABLE","variableName":"dictIQBotFileUploadParameters"}},{"name":"key","value":{"type":"STRING","string":"filePath"}},{"name":"newValue","value":{"type":"VARIABLE","variableName":"sFilePath"}}],"returnTo":{"type":"VARIABLE","variableName":"sFilePath"}},{"uid":"19020cc9-3173-466a-823f-3cbe50f933db","commandName":"python.commands.openScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"scriptOption","value":{"type":"STRING","string":"SCRIPT"}},{"name":"script","value":{"type":"STRING","string":"##################### IQ Bot File upload using REST ##########################################\n#   Implemented because AAE RPA only implements form/urlencoded posts where\n#   multi part required\n#      \n#   installation:\n#   Install python 3.6+ on developer and bot runner machines. Ensure python path set\n#   i.e. so python can be run anywhere without specifying the path (part of install\n#   or can be set later)\n#   \n#   run \"pip install requests\"\n#   \n#   Function\n#   3 sub functions:\n#       authenticate    - submits username and password to retrieve authentication token from \n#                           Control room (the IQ Bot interim control room)\n#       getFile         - takes file pathc, checks file is graphics file or pdf \n#                           based on extension. Loads file as binary data, sets other attr\n#                           based on file extension and returns file object ready\n#       sendFilesToIQBot - uses internal API from IQ Bot to upload single file\n#\n#   NOTE: This function authenticates each time run, the alternative is to build authentication\n#   calls in Task Bot, store the token and refresh every so often\n#\n# ############################################################################################   \n\nimport requests\nfrom pathlib import Path\nimport json\n\n#################### Authenticate ############################################################\n#\n#   Accepts 3 or 4 params:\n#       controlRoomUrl - string e.g. https://aa-server or http://aa-server port must be specified\n#                            if not 80\n#       userName        - string. user name on IQ Bot instance\n#       password        - string password for user\n#       nonSelfCertHttps - Default is true i.e. the cetificate for HTTPS: is NOT self certified\n#                           This option is there for internal AA demo systems where the cert is\n#                           self certified otherwise requests throws an error\n#\n#   returns:\n#       python status dict {'status':True/False,'data':Either token if success is true \n#       or error description}\n#\n###############################################################################################\ndef authenticate(controlRoomUrl,userName,password,nonSelfCertHttps=True):\n    try:\n        r=requests.post(controlRoomUrl+'/v1/authentication',data='{\"username\":\"'+userName+'\",\"password\":\"'+password+'\"}',headers={\"Content-Type\":\"application/json\"},verify=nonSelfCertHttps) \n        r.raise_for_status()\n    except Exception as err:\n        errorString =f'Other error occurred: {err}'\n        return {'status':False,'data':errorString}\n    else:\n        token = r.json()['token']\n        if len(token) > 650:\n            returnPacket = {'status':True,'data':token}\n            return returnPacket\n        else:\n            returnPacket =  {'status':False,'data':'Returned token not the right length'}\n            return returnPacket\n\n#################### getFile #################################################################\n#\n#   Accepts 1 params:\n#       filePath - string e.g. C:\\\\Users\\\\Simon Frank\\\\Desktop\\\\Invoice2.tiff NOTE: escaped \n#                   backslashes these are only needed in python - A2019 BOT need only \n#                   pass single \\\n#\n#   returns:\n#       python status dict {'status':True/False,'data':Either file object if status true  \n#       or error description}\n#\n###############################################################################################\n\ndef getFile(filePath):\n    fileName = Path(filePath).name\n    fileExtension = Path(filePath).suffix.lower()\n    if fileExtension == '.pdf':\n        mimeType = 'application/pdf'\n    elif  fileExtension == '.png':\n        mimeType = 'image/png'\n    elif fileExtension == '.jpg' or fileExtension == '.jpeg':\n        mimeType = 'image/jpeg'\n    elif  fileExtension == '.tiff':\n        mimeType = 'image/tiff'\n    elif  fileExtension == '.gif':\n        mimeType = 'image/gif'\n    else:       \n        return {'status':False,'data':'Opening file, file extension is not pdf, jpg, jpeg, png, tiff'}\n    try:\n        fileContent = open(filePath, 'rb')\n        return {'status':True,'data':{'file':(fileName,fileContent,mimeType)}}\n    except Exception as e:\n        errorString = f'File Error :{e}'\n        return {'status':False,'data':errorString}\n        \n\n#################### sendFilesToIQBot ##########################################################\n#\n#   Accepts 4 or 5 params:\n#       controlRoomUrl      - string e.g. https://aa-server or http://aa-server port must be specified\n#                            if not 80\n#       token               - string. token from authenticate\n#       learningInstanceId  - string GUID for Learning Instance\n#       files               - file object for multipart post\n#       nonSelfCertHttps - Default is true i.e. the cetificate for HTTPS: is NOT self certified\n#                           This option is there for internal AA demo systems where the cert is\n#                           self certified otherwise requests throws an error\n#\n#   returns:\n#       python status dict {'status':True/False,'data':Either API response if status true  \n#       or error description}\n#\n###############################################################################################\n\ndef sendFilesToIQBot(controlRoomUrl,token,learningInstanceId,files,nonSelfCertHttps=True):\n    #control room URL must include http:// or https://\n    url = controlRoomUrl+'/IQBot/gateway/organizations/1/projects/'+learningInstanceId+'/files/upload/1'\n    try:\n        r = requests.post(url, files=files,headers={\"x-authorization\":token},verify=nonSelfCertHttps)\n        r.raise_for_status()\n        print('HTTP(S) file upload call OK - 200')\n        return  {'status':r.json()['success'],'data':r.json()['data']}\n    except Exception as err:\n        errorString =f'File upload other error occurred: {err}'\n        return {'status':False,'data':errorString}\n\n\n#################### getFilesFromIQBot ##########################################################\n#\n#   Accepts 4 or 5 params:\n#       controlRoomUrl      - string e.g. https://aa-server or http://aa-server port must be specified\n#                            if not 80\n#       token               - string. token from authenticate\n#       learningInstanceId  - string GUID for Learning Instance\n#       statusType          - one of the 4 possible status types SUCCESS,UNCLASSIFIED,INVALID,UNTRAINED\n#                           - all but success contain original document format and success contains csv\n#       filePath             - full filePath inc name and extension (zip) of where to save the output\n#       nonSelfCertHttps - Default is true i.e. the cetificate for HTTPS: is NOT self certified\n#                           This option is there for internal AA demo systems where the cert is\n#                           self certified otherwise requests throws an error\n#\n#   returns:\n#       zip file saved with name and path provided\n#\n###############################################################################################\n\ndef getFilesFromIQBot(controlRoomUrl,token,learningInstanceId,statusType,filePath,nonSelfCertHttps=True):\n    #control room URL must include http:// or https://\n    url = controlRoomUrl+'/IQBot/gateway/learning-instances/'+learningInstanceId+'/files/archive?docStatus='+statusType\n    #url = controlRoomUrl+'/IQBot/gateway/learning-instances/'+learningInstanceId+'/files/list?docStatus='+statusType\n    print(url)\n    try:\n        r = requests.get(url, headers={\"x-authorization\":token,\"content-type\":\"application/zip\"},verify=nonSelfCertHttps)\n        if r.status_code == 200:\n            print('HTTP(S) file upload call OK - 200')\n            with open(filePath,'wb') as f:\n                f.write(r.content)\n            return  {'status':True,'data':'File downloaded to :'+filePath}\n        else:\n            return {'status':False,'data':'http response from file download: '+str(r.status_code)}\n    except Exception as err:\n        errorString =f'File Download other error occurred: {err}'\n        return {'status':False,'data':errorString}\n\n\n\n#################### iqBotFileUpload ###########################################################################\n#\n#   Accepts 1 param dictFromBot which is a task Bot dictionary with 5 Keys:\n#       controlRoomUrl      - string e.g. https://aa-server or http://aa-server port must be specified\n#                            if not 80\n#       userName            - string. user name on IQ Bot instance e.g: client\n#       password            - string password for user e.g.: 12345678\n#       learningInstanceId  - string GUID for Learning Instance e.g.: a6a5ad7c-5770-4dfa-8201-82a2c256e7b0\n#       filePath             - file path e.g. :C:\\\\Users\\\\Simon Frank\\\\Desktop\\\\Invoice2.tiff NOTE: use\n#                               single \\ from Bot or double \\\\ within python\n#       nonSelfCertHttps - Default is true i.e. the cetificate for HTTPS: is NOT self certified\n#                           This option is there for internal AA demo systems where the cert is\n#                           self certified otherwise requests throws an error\n#                            single \\ from bot, escaped \\ in python\n#\n#   returns:\n#       python status dict {'status':True/False,'data':Either API response if status true  \n#       or error description}\n#\n###############################################################################################\n\ndef iqBotFileUpload(dictFromBot):\n    try:\n        controlRoomUrl = formatTrail(dictFromBot['controlRoomUrl'])\n        userName = dictFromBot['userName']\n        password = dictFromBot['password']\n        learningInstanceId = dictFromBot['learningInstanceId']\n        filePath = formatTrail(dictFromBot['filePath'])\n        nonSelfCertHttps = dictFromBot['nonSelfCertHttps'] if 'nonSelfCertHttps' in dictFromBot else True\n        if controlRoomUrl == '' or userName == '' or password == '' or learningInstanceId == '' or filePath =='' :\n            return json.dumps({'status': False,'data':'No parameter can be blank or null'})\n        token = authenticate(controlRoomUrl,userName,password)\n        if token['status'] == True:\n            files = getFile(filePath)\n            if files['status'] == True:\n                response = sendFilesToIQBot(controlRoomUrl,token['data'],learningInstanceId,files['data'])\n                return json.dumps({'status':response['status'],'data':response['data']})\n            else:\n                return json.dumps({'status':files['status'],'data':files['data']})\n        else:\n            return json.dumps({'status':token['status'],'data':token['data']})\n    except Exception as e:\n        return json.dumps({'status': False,'data':f'Exception in main {e}'})\n\n#################### iqBotFileDownload ###########################################################################\n#\n#   Accepts 1 param dictFromBot which is a task Bot dictionary with 5 Keys:\n#       controlRoomUrl      - string e.g. https://aa-server or http://aa-server port must be specified\n#                            if not 80\n#       userName            - string. user name on IQ Bot instance e.g: client\n#       password            - string password for user e.g.: 12345678\n#       learningInstanceId  - string GUID for Learning Instance e.g.: a6a5ad7c-5770-4dfa-8201-82a2c256e7b0\n#       statusType          - one of the 5 possible status types SUCCESS,UNCLASSIFIED,INVALID,UNTRAINED,VALIDATION\n#                           - all but success contain original document format and success contains csv\n#       filePath             - full filePath inc name and extension (zip) of where to save the output NOTE: use\n#                           single \\ from bot or double \\\\ within python\n#       nonSelfCertHttps - Default is true i.e. the cetificate for HTTPS: is NOT self certified\n#                           This option is there for internal AA demo systems where the cert is\n#                           self certified otherwise requests throws an error\n#                            single \\ from bot, escaped \\ in python\n#\n#   returns:\n#       JSON Packet with status e.g. {'status':true,'data':filePath}\n#\n###############################################################################################\n\ndef iqBotFileDownload(dictFromBot):\n    try:\n        controlRoomUrl = formatTrail(dictFromBot['controlRoomUrl'])\n        userName = dictFromBot['userName']\n        password = dictFromBot['password']\n        learningInstanceId = dictFromBot['learningInstanceId']\n        statusType = dictFromBot['statusType']\n        filePath = formatTrail(dictFromBot['filePath'])\n        nonSelfCertHttps = dictFromBot['nonSelfCertHttps'] if 'nonSelfCertHttps' in dictFromBot else True\n        if controlRoomUrl == '' or userName == '' or password == '' or learningInstanceId == '' or filePath =='' or statusType == '':\n            return json.dumps({'status': False,'data':'No parameter can be blank or null'})\n        token = authenticate(controlRoomUrl,userName,password)\n        if token['status'] == True:\n            return getFilesFromIQBot(controlRoomUrl,token['data'],learningInstanceId,statusType,filePath,nonSelfCertHttps)\n        else:\n            return json.dumps({'status':token['status'],'data':token['data']})\n    except Exception as e:\n        return json.dumps({'status': False,'data':f'Exception in main {e}'})\n\ndef formatTrail(formatString):\n      if formatString.endswith('/'): return formatString[:-1]\n      else: return formatString\n\n\n\n\n#################### tests ###########################################################################\n#\n#   command line tests of different error conditions\n#   DO NOT RUN IN BOT\n######################################################################################################\n\nprint ('Test 1 =================================================================================')\ntestData = {'password':'Kris00!1','controlRoomUrl':'https://yinson-dev1.iqbot-invoice-processing.automationanywhere.digital','filePath':'C:\\\\SupplierInvoiceProcessing\\\\Input\\\\Inv_automationanywhere_11042020_024843.pdf','userName':'botcreator1','learningInstanceId':'866bd301-0b1b-49ca-b651-72c9ab9d7dcc'}\nprint(iqBotFileUpload(testData))\n\n'''#file download test\ntestData = {'password':'Kris00!1','controlRoomUrl':'https://yinson-dev1.iqbot-invoice-processing.automationanywhere.digital','filePath':'C:\\\\Ram\\\\ClientFiles\\\\YINSON\\\\IQBot Cloud\\\\success.zip','userName':'botcreator1','learningInstanceId':'4feb9ac4-5f96-4c54-b079-5a93dc230c55','statusType':'SUCCESS'}\nprint(iqBotFileDownload(testData))\n\n#file download test\n#testData = {'password':'P@ssw0rd','controlRoomUrl':'http://localhost','filePath':'C:\\\\Ram\\\\ClientFiles\\\\YINSON\\\\IQBot Cloud\\\\success.zip','userName':'ram','learningInstanceId':'9f0e6114-917d-43ad-877e-1f36299bb1bf','statusType':'SUCCESS'}\n#print(iqBotFileDownload(testData))\n\n#Other examples\ntestData = {'password':'12345678','controlRoomUrl':'http://aa-server','filePath':'C:\\\\Users\\\\Simon�Frank\\\\OneDrive�-�Automation�Anywhere\\\\Training\\\\Slides�and�examples\\\\All�Levels\\\\Level1\\\\Invoice1.tiff','userName':'client','learningInstanceId':'a5bb14a1-af82-4bea-b593-e8be64f15630'}\nprint(iqBotFileUpload(testData))\ntestData = {'password':'12345678','controlRoomUrl':'https://cr2-eu-ps.automationanywhere.net','filePath':'C:\\\\Users\\\\Simon Frank\\\\Desktop\\\\Invoice2.tiff','userName':'simon.frank','learningInstanceId':'a6a5ad7c-5770-4dfa-8201-82a2c256e7b0'}\nprint(iqBotFileUpload(testData))\n'''"}},{"name":"version","value":{"type":"STRING","string":"3"}}]},{"uid":"bcc9afa0-82a1-4d68-8909-d1cc82543265","commandName":"python.commands.executeFunction","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"type":"STRING","string":"Default"}},{"name":"functionName","value":{"type":"STRING","string":"iqBotFileUpload"}},{"name":"argument","value":{"type":"VARIABLE","variableName":"dictIQBotFileUploadParameters"}}],"returnTo":{"type":"VARIABLE","variableName":"sOutStatus"}},{"uid":"1e9c2439-21ae-4348-a37d-bb8cfc7a7aa9","commandName":"messageBox","packageName":"MessageBox","disabled":true,"attributes":[{"name":"title","value":{"type":"STRING","string":"Automation Anywhere Enterprise Client"}},{"name":"content","value":{"type":"STRING","expression":"$sOutStatus$"}},{"name":"scrollLines","value":{"type":"NUMBER","number":"30"}},{"name":"closeMsgBox","value":{"type":"BOOLEAN","boolean":false}}]},{"uid":"ee95cf12-d1ed-4e2b-82b7-0b4bb8351993","commandName":"python.commands.closeScript","packageName":"Python","disabled":false,"attributes":[{"name":"session","value":{"string":"Default","type":"STRING"}}]}],"attributes":[{"name":"title","value":{"type":"STRING","string":"IQBot Upload file"}}]}],"variables":[{"name":"prompt-assignment","description":"A variable you can use for assignments","type":"STRING","subtype":"UNDEFINED","readOnly":false,"input":false,"output":false},{"name":"sControlRoomUrl","description":"","type":"STRING","readOnly":false,"input":true,"output":false,"defaultValue":{"type":"STRING","string":"https://yinson-dev1.iqbot-invoice-processing.automationanywhere.digital"}},{"name":"sUserName","description":"","type":"STRING","readOnly":false,"input":true,"output":false,"defaultValue":{"type":"STRING","string":"botcreator1"}},{"name":"sPassword","description":"","type":"STRING","readOnly":false,"input":true,"output":false,"defaultValue":{"type":"STRING","string":"Kris00!1"}},{"name":"sLearningInstanceId","description":"","type":"STRING","readOnly":false,"input":true,"output":false,"defaultValue":{"type":"STRING","string":"866bd301-0b1b-49ca-b651-72c9ab9d7dcc"}},{"name":"sFilePath","description":"","type":"STRING","readOnly":false,"input":true,"output":false,"defaultValue":{"type":"STRING","string":"C:\\SupplierInvoiceProcessing\\Input\\Inv_automationanywhere_11042020_024843.pdf"}},{"name":"dictIQBotFileUploadParameters","description":"","type":"DICTIONARY","readOnly":false,"input":false,"output":false,"subtype":"STRING","defaultValue":{"type":"DICTIONARY","dictionary":[{"key":"controlRoomUrl","value":{"type":"STRING","string":"https://yinson-dev1.iqbot-invoice-processing.automationanywhere.digital"}},{"key":"userName","value":{"type":"STRING","string":"botcreator1"}},{"key":"password","value":{"type":"STRING","string":"Kris00!1"}},{"key":"learningInstanceId","value":{"type":"STRING","string":"866bd301-0b1b-49ca-b651-72c9ab9d7dcc"}},{"key":"filePath","value":{"type":"STRING","string":"C:\\SupplierInvoiceProcessing\\Input\\Inv_automationanywhere_11042020_024843.pdf"}}]}},{"name":"sOutStatus","description":"","type":"STRING","readOnly":false,"input":false,"output":true,"defaultValue":{"type":"STRING","string":""}},{"name":"dIQBotConfig","description":"","type":"DICTIONARY","readOnly":false,"input":false,"output":false,"subtype":"STRING","defaultValue":{"type":"DICTIONARY","dictionary":[]}}],"breakpoints":[],"packages":[{"name":"Dictionary","version":"2.0.0-20200302-135932"},{"name":"MessageBox","version":"2.0.0-20200131-090041"},{"name":"Python","version":"2.0.0-20200313-170254"},{"name":"Step","version":"2.0.0-20200205-230315"}],"workItemTemplateName":null}